.\" ============================================================================
.TH vsearch 1 "October 16, 2014" "version 0.0.15" "USER COMMANDS"
.\" ============================================================================
.SH NAME
vsearch \(em dereplicate, filter, sort, search, compare and clusterize
amplicons from metagenomic projects
.\" ============================================================================
.SH SYNOPSIS
.B vsearch
[
.I options
]
.I filename
.\" ============================================================================
.SH DESCRIPTION
Environmental or clinical molecular studies generate large volumes of
amplicons (e.g. SSU-rRNA sequences) that need to be filtered,
dereplicated, searched, clustered or compared to sequences from other
studies. The aim of \fBvsearch\fR is to offer a all-in-one open source
tool to perform these tasks, using optimized algorithm implementations
and harvesting the full potential of modern computers to guarantee the
fastest and more accurate possible processing.
.PP
Nucleotidic sequence comparisons is at the core of \fBvsearch\fR. To
speed up comparisons, \fBvsearch\fR implements \fIk\fR-mer filtering,
and an extremely fast Needleman-Wunsch algorithm making use of the
Streaming SIMD Extensions (SSE2) of modern x86-64 CPUs. If SSE2
instructions are not available, \fBvsearch\fR exits with an error
message.
.\" ----------------------------------------------------------------------------
.SS Input
\fBvsearch\fR input is a fasta file containing one or several
nucleotidic sequences. For each sequence, the sequence identifier is
defined as the string comprised between the ">" symbol and the first
space or the end of the line, whichever comes first. Additionally, if
the line ends with the pattern ";size=\fIinteger\fR;", \fBvsearch\fR
will interpret \fIinteger\fR as the abundance of the sequence (in a
dereplicated fasta file for instance). The nucleotidic sequence is
defined as a string of [acgt] or [acgu] symbols (case insensitive),
starting after the end of the identifier line and ending before the
next identifier line or the file end; \fBvsearch\fR exits with an
error message if any other symbol is present in the
sequence. Optionally, \fBvsearch\fR can be compiled to accepted
compressed fasta files as input (gz and bzip2 formats).
.\" ----------------------------------------------------------------------------
.SS Options
\fBvsearch\fR recognizes a large number of command-line options. For
an easier navigation, options are grouped by theme (dereplication,
filtering, sorting, searching, comparison, clustering). We start with
general options that apply to all themes.
.PP
General options:
.RS
.TP 9
.B --help
display a short help and exit.
.TP
.B --version
output version information and exit.
.TP
.BI --fasta_width\~ "positive integer"
fasta files produced by \fBvsearch\fR are wrapped (sequences written
on lines of \fIinteger\fR nucleotides, 80 by default). Set that value
to 0 to eliminate the wrapping.
.TP
.BI --maxseqlength\~ "positive integer"
all \fBvsearch\fR operations will discard sequences of length equal or
greater than \fIinteger\fR (50,000 nucleotides by default).
.TP
.BI --minseqlength\~ "positive integer"
all \fBvsearch\fR operations will discard sequences of length smaller
than \fIinteger\fR (1 nucleotide by default for sorting or shuffling,
32 nucleotides for dereplication or searching).
.TP
.B --notrunclabels
do not truncate sequence labels at first space, use the full header.
.TP
.BI --strand\~ "plus|both"
when searching or dereplicating, check the \fIplus\fR strand only
(default) or check \fIboth\fR strands.
.TP
.BI --threads\~ "positive integer"
number of computation threads to use. The number of threads should be
lesser or equal to the number of available CPU cores. The default is to 
launch one thread per available CPU core.
.TP
.BI --uc \0filename
when searching, clustering or dereplicating, output results in
\fIfilename\fR using a uclust-like format.
.TP
.B --uc_allhits
when searching, clustering or dereplicating, and when using the
uclust-like format option, show all hits, not just top hit.

.RE
.\" ----------------------------------------------------------------------------
Clustering options:
.RS
.TP 9
.BI --centroids \0filename
output cluster centroid sequences to \fIfilename\fR file.
.TP
.BI --cluster_smallmem \0filename
use a slower clustering algorithm (consumes less memory) and write the
results to \fIfilename\fR.
.TP
.BI --clusters \0string
output each cluster to a separate fasta file using \fIstring\fR as
prefix for the filenames.
.TP
.BI --consout \0filename
output cluster consensus sequences to \fIfilename\fR file.
.TP
.B --construncate
when using the consout option, do not ignore terminal gaps in the
multiple sequence alignment when building the consensus sequence.
.TP
.BI --msaout \0filename
output multiple sequence alignments to \fIfilename\fR.
.TP
.BI --uc \0filename
use the fast clustering algorithm and write the results to
\fIfilename\fR.
.TP
.B --usersort
conserve the initial input order of sequences, do not sort sequences
by decreasing length.

.RE
.\" ----------------------------------------------------------------------------
Dereplication, masking, shuffling and sorting options:
.RS
.TP 9
.BI --derep_fulllength \0filename
merge strictly identical sequences contained in
\fIfilename\fR. Redundant sequences receive the header of the sequence
of their group, and the number of occurrences (abundance) is indicated
at the end of the fasta header using the pattern ";size=X;".
.TP
.BI --maskfasta \0filename
mask sequences contained in \fIfilename\fR.
.TP
.BI --maxsize\~ "positive integer"
when using --sortbysize, discard sequences with an abundance value
greater than \fIinteger\fR.
.TP
.BI --minsize\~ "positive integer"
when using --sortbysize, discard sequences with an abundance value
smaller than \fIinteger\fR.
.TP
.BI --minuniquesize\~ "positive integer"
when dereplicating, discard sequences with an abundance value
smaller than \fIinteger\fR.
.TP
.BI --output \0filename
when dereplicating, sorting or shuffling, write the results to
\fIfilename\fR.
.TP
.BI --relabel \0string
when sorting, relabel sequence headers using \fIstring\fR as suffix.
.TP
.BI --seed\~ "positive integer"
when shuffling, use \fIinteger\fR as seed. Set to 0 to use a
pseudo-random seed.
.TP
.B --sizein
read abundance annotation from input
.TP
.B --sizeout
add abundance annotation to output
.TP
.BI --shuffle \0filename
pseudo-randomly shuffle the order of sequences contained in
\fIfilename\fR.
.TP
.BI --sortbylength \0filename
sort by decreasing length the sequences contained in \fIfilename\fR.
.TP
.BI --sortbysize \0filename
sort by decreasing abundance the sequences contained in \fIfilename\fR.
.TP
.B --topn\~ "positive integer"
when dereplicating, sorting or shuffling, output just the top
\fIinteger\fR sequences.

.RE
.\" ----------------------------------------------------------------------------
Searching options:
.RS
.TP 9
.BI --alnout \0filename
write pairwise global alignments to \fIfilename\fR using a
human-readable format.
.TP
.BI --blast6out \0filename
write search results to \fIfilename\fR using a blast-like
tab-separated format.
.TP
.BI --db \0filename
compare query sequences to the fasta-formatted subject sequences
contained in \fIfilename\fR, using global pairwise alignment.
.TP
.BI --dbmask\~ "none|dust|soft"
mask simple repeats and low-complexity regions in subject database
sequences using the \fIdust\fR or the \fIsoft\fR algorithms, or do not
mask (\fInone\fR). The default is to mask using \fIdust\fR.
.TP
.BI --dbmatched \0filename
write database subject sequences matching at least one query sequence
to \fIfilename\fR, in fasta format.
.TP
.BI --dbnotmatched \0filename
write database subject sequences not matching query sequences to
\fIfilename\fR, in fasta format.
.TP
.BI --fastapairs \0filename
write pairs of query and subject sequences to \fIfilename\fR, in fasta
format.
.TP
.B --fulldp
uses a 8-way SIMD vectorized full dynamic programming algorithm
(Needleman-Wunsch). That option increases the sensitivity of vsearch.
.TP
.BI --gapext \0string
penalties for gap extension (2I/1E)
.TP
.BI --gapopen \0string
penalties for gap opening (20I/2E)
.TP
.B --hardmask
mask low-complexity regions by replacing them with Ns instead of
setting them to lower case.
.TP
.BI --id \0real
reject the sequence match if the pairwise identity is lower than
\fIreal\fR (value ranging from 0.0 to 1.0 included).
.TP
.BI --idprefix\~ "positive integer"
reject the subject sequence if the first \fIinteger\fR nucleotides do
not match the query sequence.
.TP
.BI --idsuffix\~ "positive integer"
reject the subject sequence if the last \fIinteger\fR nucleotides do
not match the query sequence.
.TP
.B --leftjust
reject the subject sequence if the alignment begins with gaps.
.TP
.B --leftjust
reject the subject sequence if the alignment begins with gaps.
.TP
.BI --match\~ "integer"
score assigned to a match (i.e. identical nucleotides) in the pairwise
alignment. The default value is 2.
.TP
.BI --matched \0filename
write query sequences matching database subject sequences to
\fIfilename\fR, in fasta format.
.TP
.BI --maxaccepts\~ "positive integer"
maximum number of hits to accept before stopping the search. The
default value is 1. That option works in pair with maxrejects. The
search process sorts subject sequences by decreasing number of kmers
they have in common with the query sequence, using that information as
a proxy for sequence similarity. If the first subject sequence passes
the acceptation criteria, it is accepted as best hit and the search
process stops for that query. If maxaccepts is set to a higher value,
it accepts more hits. If maxaccepts and maxrejects are both set to 0,
the complete database is searched.
.TP
.BI --maxdiffs\~ "positive integer"
reject the subject sequence if the alignment contains at least
\fIinteger\fR substitutions, insertions or deletions.
.TP
.BI --maxgaps\~ "positive integer"
reject the subject sequence if the alignment contains at least
\fIinteger\fR insertions or deletions.
.TP
.BI --maxhits\~ "positive integer"
maximum number of hits to show. The default value is 1.
.TP
.BI --maxid \0real
reject the subject sequence if its percentage of identity with the
query is equal or greater than \fIreal\fR.
.TP
.BI --maxqsize\~ "positive integer"
reject query sequences with an abundance equal or greater than
\fIinteger\fR.
.TP
.BI --maxqt \0real
reject if the query/subject length ratio is equal or greater than
\fIreal\fR.
.TP
.BI --maxrejects\~ "positive integer"
maximum number of non-matching subject sequences to consider before
stopping the search. The default value is 32. That option works in
pair with maxaccepts. The search process sorts subject sequences by
decreasing number of kmers they have in common with the query
sequence, using that information as a proxy for sequence
similarity. If none of the first 32 subject sequence pass the
acceptation criteria, the search process stops for that query (no
hit). If maxrejects is set to a higher value, more subject sequences
will be considered. If maxaccepts and maxrejects are both set to 0,
the complete database is searched.
.TP
.BI --maxsizeratio \0real
reject if the query/subject abundance ratio is equal or greater than
\fIreal\fR.
.TP
.BI --maxsl \0real
reject if the shorter/longer length ratio is equal or greater than
\fIreal\fR.
.TP
.BI --maxsubs\~ "positive integer"
reject the subject sequence if the alignment contains at least
\fIinteger\fR substitutions.
.TP
.BI --mid \0real
reject the subject sequence if its percentage of identity with the
query is lower than \fIreal\fR (ignoring gaps).
.TP
.BI --mincols\~ "positive integer"
reject the subject sequence if the alignment length is shorter than
\fIinteger\fR.
.TP
.BI --minqt \0real
reject if the query/subject length ratio is lower than \fIreal\fR.
.TP
.BI --minsizeratio \0real
reject if the query/subject abundance ratio is lower than \fIreal\fR.
.TP
.BI --minsl \0real
reject if the shorter/longer length ratio is lower than \fIreal\fR.
.TP
.BI --mintsize\~ "positive integer"
reject subject sequences with an abundance lower than \fIinteger\fR.
.TP
.BI --mismatch\~ "integer"
score assigned to a mismatch (i.e. different nucleotides) in the
pairwise alignment. The default value is -4.
.TP
.BI --notmatched \0filename
write query sequences not matching database subject sequences to
\fIfilename\fR, in fasta format.
.TP
.BI --output_no_hits \0filename
write both matching and non-matching queries to output
files. Non-matching queries are labelled "no hit" \fB(to be
verified)\fR.
.TP
.BI --qmask\~ "none|dust|soft"
mask simple repeats and low-complexity regions in query sequences
using the \fIdust\fR or the \fIsoft\fR algorithms, or do not mask
(\fInone\fR). The default is to mask using \fIdust\fR.
.TP
.BI --query_cov \0real
reject if the fraction of the query aligned to the subject sequence is
lower than \fIreal\fR.
.TP
.B --rightjust
reject the subject sequence if the alignment ends with gaps.
.TP
.BI --rowlen\~ "positive integer"
width of alignment lines in alnout output. The default value is 64.
.TP
.B --self
reject the alignment if the query and subject labels are identical.
.TP
.B --selfid
reject the alignment if the query and subject sequences are identical.
.TP
.BI --target_cov \0real
reject if the fraction of the subject sequence aligned to the query
sequence is lower than \fIreal\fR.
.TP
.B --top_hits_only
output only hits with the highest percentage of identity with the
query.
.TP
.BI --userfields \0string
when using the userout option, select the fields that are written to
the file. \fB(list and document the fields)\fR
.TP
.BI --userout \0filename
write user-defined tab-separated output to \fIfilename\fR. See "userfields".
.TP
.BI --vsearch_global \0filename
\fIfilename\fR of queries for global alignment search.
.TP
.BI --weak_id \0real
show hits with percentage of identity of at least \fIreal\fR; and
continue the search. That option allows to report very weak sequence
similarities.
.TP
.BI --wordlength\~ "positive integer"
length of words (\fIk\fRmers) for database index. The default value is 8.
.RE
.\" ============================================================================
.SH EXAMPLES
(in progress)

Search queries in a reference database:

.RS
\fBvsearch\fR --vsearch_global \fIqueries.fas\fR --db \fIreferences.fas\fR --alnout \fIresults.aln\fR --id 0.8 --fuldp

.RE
search a sequence dataset against itself, ignoring self hits but getting all matches above a certain identity level, and collecting results in a blast-like format:

.RS
\fBvsearch\fR --vsearch_global \fIqueries.fas\fR --db \fIqueries.fas\fR --strand plus --id 0.6 --alnout \fIresults.aln\fR --selfid --blast6out \fIresults.blast6\fR -maxaccepts 0 -maxrejects 0

.RE

.\" .B vsearch
.\" -t 4 -o
.\" .I myfile.vsearchs myfile.fasta
.\" .br
.\" Divide the data set \fImyfile.fasta\fR into vsearchs with the finest
.\" resolution possible (1 difference) using 4 computation threads, and
.\" write the results in the file \fImyfile.vsearchs\fR.
.\" .PP
.\" zcat file.fas.gz | \fBvsearch\fR | awk "{print NF}" | sort -n | uniq -c
.\" .br
.\" Use vsearch in a pipeline to read a compressed fasta file and to get its
.\" vsearch size profile (with default parameters).
.\" ============================================================================
.SH LIMITATIONS
\fBvsearch\fR does not yet perform chimera detection.
.\" ============================================================================
.SH AUTHORS
Implementation by Torbjørn Rognes and Tomas Flouri, documentation by Frédéric Mahé, .
.\" ============================================================================
.SH REPORTING BUGS
Submit suggestions and bug-reports at
<https://github.com/torognes/vsearch/issues>, send a pull request on
<https://github.com/torognes/vsearch>, or compose a friendly or
curmudgeont e-mail to Torbjørn Rognes <torognes@ifi.uio.no>.
.\" ============================================================================
.SH AVAILABILITY
The software is available from <https://github.com/torognes/vsearch>
.\" ============================================================================
.SH COPYRIGHT
Copyright (C) 2014 Torbjørn Rognes et al.
.PP
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or any later version.
.PP
This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Affero General Public License for more details.
.PP
You should have received a copy of the GNU Affero General Public
License along with this program.  If not, see
<http://www.gnu.org/licenses/>.
.PP
\fBvsearch\fR includes code from Google's CityHash project by Geoff
Pike and Jyrki Alakuijala, providing some excellent hash functions
available under a MIT license.
.PP
\fBvsearch\fR includes code derived from Tatusov and Lipman's DUST
program that is in the public domain.
.PP
\fBvsearch\fR binaries may include code from the zlib library
copyright Jean-loup Gailly and Mark Adler.
.PP
\fBvsearch\fR binaries may include code from the bzip2 library
copyright Julian R. Seward.
.\" ============================================================================
.SH SEE ALSO
\fBswipe\fR, an extremely fast Smith-Waterman database search tool by
Torbjørn Rognes (available from <https://github.com/torognes/swipe>).
.\" ============================================================================
.SH VERSION HISTORY
New features and important modifications of \fBvsearch\fR (short lived
or minor bug releases are not mentioned):
.RS
.TP
.BR v1.0\~ "released November 1st, 2014"
First public release
.LP
.\" ============================================================================
.\" NOTES
.\" visualize and output to pdf
.\" man -l vsearch.1
.\" man -t ./doc/vsearch.1 | ps2pdf - > ./doc/vsearch_manual.pdf
.\"
.\" INSTALL (sysadmin)
.\" gzip -c vsearch.1 > vsearch.1.gz
.\" mv vsearch.1.gz /usr/share/man/man1/
