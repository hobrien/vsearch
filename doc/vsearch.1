.\" ============================================================================
.TH vsearch 1 "October 5, 2014" "version 0.0.15" "USER COMMANDS"
.\" ============================================================================
.SH NAME
vsearch \(em dereplicate, filter, sort, search, compare and clusterize
amplicons from metagenomic projects
.\" ============================================================================
.SH SYNOPSIS
.B vsearch
[
.I options
]
.I filename
.\" ============================================================================
.SH DESCRIPTION
Environmental or clinical molecular studies generate large volumes of
amplicons (e.g. SSU-rRNA sequences) that need to be filtered,
dereplicated, searched, clustered or compared to sequences from other
studies. The aim of \fBvsearch\fR is to offer a all-in-one open source
tool to perform these tasks, using optimized algorithm implementations
and harvesting the full potential of modern computers to guarantee the
fastest and more accurate possible processing.
.PP
Nucleotidic sequence comparisons is at the core of \fBvsearch\fR. To
speed up comparisons, \fBvsearch\fR implements \fIk\fR-mer filtering,
and an extremely fast Needleman-Wunsch algorithm making use of the
Streaming SIMD Extensions (SSE2) of modern x86-64 CPUs. If SSE2
instructions are not available, \fBvsearch\fR exits with an error
message.
.PP
\fBvsearch\fR input is a fasta file containing one or several
nucleotidic sequences. For each sequence, the sequence identifier is
defined as the string comprised between the ">" symbol and the first
space or the end of the line, whichever comes first. Additionally, if
the line ends with the pattern ";size=\fIinteger\fR;", \fBvsearch\fR
will interpret \fIinteger\fR as the abundance of the sequence (in a
dereplicated fasta file for instance). The nucleotidic sequence is
defined as a string of [acgt] or [acgu] symbols (case insensitive),
starting after the end of the identifier line and ending before the
next identifier line or the file end; \fBvsearch\fR exits with an
error message if any other symbol is present in the
sequence. Optionally, \fBvsearch\fR can be compiled to accepted
compressed fasta files as input (gz and bzip2 formats).
.\" ----------------------------------------------------------------------------
.SS Options
\fBvsearch\fR recognizes a large number of command-line options. For
an easier navigation, options are grouped by theme (dereplication,
filtering, sorting, searching, comparison, clustering). We start with
general options that apply to all themes.
.PP
General options:
.RS
.TP 9
.B --help
display a short help and exit.
.TP
.B --version
output version information and exit.
.TP
.BI --fasta_width\~ "positive integer"
fasta files produced by \fBvsearch\fR are wrapped (sequences written
on lines of \fIinteger\fR nucleotides, 80 by default). Set that value
to 0 to eliminate the wrapping.
.TP
.BI --maxseqlength\~ "positive integer"
all \fBvsearch\fR operations will discard sequences of length equal or
greater than \fIinteger\fR (50,000 nucleotides by default).
.TP
.BI --minseqlength\~ "positive integer"
all \fBvsearch\fR operations will discard sequences of length smaller
than \fIinteger\fR (1 nucleotide by default for sorting or shuffling,
32 nucleotides for dereplication or searching).
.TP
.B --notrunclabels
do not truncate sequence labels at first space, use the full header.
.TP
.BI --strand\~ "plus|both"
when searching or dereplicating, check the \fIplus\fR strand only
(default) or check \fIboth\fR strands.
.TP
.BI --threads\~ "positive integer"
number of computation threads to use. The number of threads should be
lesser or equal to the number of available CPU cores. The default is to 
launch one thread per available CPU core.
.TP
.BI --uc \0filename
when searching or dereplicating, output results in \fIfilename\fR
using a uclust-like format.
.TP
.B --uc_allhits
when searching or dereplicating, and when using the uclust-like format
option, show all hits, not just top hit.

.RE
.\" ----------------------------------------------------------------------------
Clustering options:
.RS
.TP 9
.BI --uc \0filename
use the fast clustering algorithm and write the results to
\fIfilename\fR.
.TP
.BI --cluster_smallmem \0filename
use a slower clustering algorithm (consumes less memory) and write the
results to \fIfilename\fR.
.TP
.BI --centroids \0filename
output cluster centroid sequences to \fIfilename\fR file.
.TP
.BI --clusters \0string
output each cluster to a separate fasta file using \fIstring\fR as
prefix for the filenames.
.TP
.BI --consout \0filename
output cluster consensus sequences to \fIfilename\fR file.
.TP
.B --construncate
when using the consout option, do not ignore terminal gaps in the
multiple sequence alignment when building the consensus sequence.
.TP
.BI --msaout \0filename
output multiple sequence alignments to \fIfilename\fR.
.TP
.B --usersort
conserve the initial input order of sequences, do not sort sequences
by decreasing length.

.RE
.\" ----------------------------------------------------------------------------
Dereplication, masking, shuffling and sorting options:
.RS
.TP 9
.BI --derep_fulllength \0filename
merge strictly identical sequences contained in
\fIfilename\fR. Redundant sequences receive the header of the sequence
of their group, and the number of occurrences (abundance) is indicated
at the end of the fasta header using the pattern ";size=X;".
.PP
.BI --maskfasta \0filename
mask sequences contained in \fIfilename\fR.
.PP
.BI --shuffle \0filename
pseudo-randomly shuffle the order of sequences contained in
\fIfilename\fR.
.PP
.BI --sortbylength \0filename
sort by decreasing length the sequences contained in \fIfilename\fR.
.PP
.BI --sortbysize \0filename
sort by decreasing abundance the sequences contained in \fIfilename\fR.
.PP
.BI --maxsize\~ "positive integer"
when using --sortbysize, discard sequences with an abundance value
greater than \fIinteger\fR.
.PP
.BI --minsize\~ "positive integer"
when using --sortbysize, discard sequences with an abundance value
smaller than \fIinteger\fR.
.PP
.BI --minuniquesize\~ "positive integer"
when dereplicating, discard sequences with an abundance value
smaller than \fIinteger\fR.
.PP
.BI --output \0filename
when dereplicating, sorting or shuffling, write the results to
\fIfilename\fR.
.PP
.BI --relabel \0string
when sorting, relabel sequence headers using \fIstring\fR as suffix.
.PP
.BI --seed\~ "positive integer"
when shuffling, use \fIinteger\fR as seed. Set to 0 to use a
pseudo-random seed.
.PP
.B --sizein
read abundance annotation from input
.PP
.B --sizeout
add abundance annotation to output
.PP
.B --topn\~ "positive integer"
when dereplicating, sorting or shuffling, output just the top
\fIinteger\fR sequences.

.RE
.\" ----------------------------------------------------------------------------
Searching options: (in progress)
.\" .LP
.\" ----------------------------------------------------------------------------
.\" Dereplication, masking, shuffling and sorting options:
.\"     --derep_fulllength <filename>
.\"     --maskfasta <filename>
.\"     --shuffle <filename>
.\"     --sortbylength <filename>
.\"     --sortbysize <filename>
.\"     --maxsize <int> (Default inf.)
.\"     --minsize <int> (Default 0)
.\"     --minuniquesize <int>
.\"     --output <filename>
.\"     --relabel
.\"     --seed <int> (Default 0=randomize)
.\"     --sizein
.\"     --sizeout
.\"     --strand <plus|both>
.\"     --topn <int>
.\" ============================================================================
.SH EXAMPLES
(in progress)
.\" .B vsearch
.\" -t 4 -o
.\" .I myfile.vsearchs myfile.fasta
.\" .br
.\" Divide the data set \fImyfile.fasta\fR into vsearchs with the finest
.\" resolution possible (1 difference) using 4 computation threads, and
.\" write the results in the file \fImyfile.vsearchs\fR.
.\" .PP
.\" zcat file.fas.gz | \fBvsearch\fR | awk "{print NF}" | sort -n | uniq -c
.\" .br
.\" Use vsearch in a pipeline to read a compressed fasta file and to get its
.\" vsearch size profile (with default parameters).
.\" ============================================================================
.SH LIMITATIONS
\fBvsearch\fR does not perform chimera detection..
.\" ============================================================================
.SH AUTHORS
Implementation by Torbjørn Rognes and Tomas Flouri, documentation by Frédéric Mahé, .
.\" ============================================================================
.SH REPORTING BUGS
Submit suggestions and bug-reports at
<https://github.com/torognes/vsearch/issues>, send a pull request on
<https://github.com/torognes/vsearch>, or compose a friendly or
curmudgeont e-mail to Torbjørn Rognes <torognes@ifi.uio.no>.
.\" ============================================================================
.SH AVAILABILITY
The software is available from <https://github.com/torognes/vsearch>
.\" ============================================================================
.SH COPYRIGHT
Copyright (C) 2014 Torbjørn Rognes et al.
.PP
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or any later version.
.PP
This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Affero General Public License for more details.
.PP
You should have received a copy of the GNU Affero General Public
License along with this program.  If not, see
<http://www.gnu.org/licenses/>.
.PP
\fBvsearch\fR includes code from Google's CityHash project by Geoff
Pike and Jyrki Alakuijala, providing some excellent hash functions
available under a MIT license.
.PP
\fBvsearch\fR includes code derived from Tatusov and Lipman's DUST
program that is in the public domain.
.PP
\fBvsearch\fR binaries may include code from the zlib library
copyright Jean-loup Gailly and Mark Adler.
.PP
\fBvsearch\fR binaries may include code from the bzip2 library
copyright Julian R. Seward.
.\" ============================================================================
.SH SEE ALSO
\fBswipe\fR, an extremely fast Smith-Waterman database search tool by
Torbjørn Rognes (available from <https://github.com/torognes/swipe>).
.\" ============================================================================
.SH VERSION HISTORY
New features and important modifications of \fBvsearch\fR (short lived
or minor bug releases are not mentioned):
.RS
.TP
.BR v1.0\~ "released November 1st, 2014"
First public release
.LP
.\" ============================================================================
.\" NOTES
.\" visualize and output to pdf
.\" man -l vsearch.1
.\" man -t ./doc/vsearch.1 | ps2pdf - > ./doc/vsearch_manual.pdf
.\"
.\" INSTALL (sysadmin)
.\" gzip -c vsearch.1 > vsearch.1.gz
.\" mv vsearch.1.gz /usr/share/man/man1/
