.\" ============================================================================
.TH vsearch 1 "November 2, 2014" "version 0.1.0" "USER COMMANDS"
.\" ============================================================================
.SH NAME
vsearch \(em dereplicate, filter, sort, search, compare and clusterize
amplicons from metagenomic projects
.\" ============================================================================
.SH SYNOPSIS
Searching:
.RS
\fBvsearch\fR [\fIoptions\fR] --vsearch_global \fIfastafile\fR --db
\fIfastafile\fR (--alnout|--blast6out|--userout|--uc) \fIoutputfile\fR --id
\fIreal\fR
.RE
Clustering:
.RS
(in progress)
.RE
Dereplication:
.RS
\fBvsearch\fR [\fIoptions\fR] --derep_fulllength \fIfastafile\fR (--output|--uc) \fIoutputfile\fR
.RE
.\" ============================================================================
.SH DESCRIPTION
Environmental or clinical molecular studies generate large volumes of
amplicons (e.g. SSU-rRNA sequences) that need to be dereplicated,
filtered, sorted, searched, clusterized or compared to reference
sequences. The aim of \fBvsearch\fR is to offer a all-in-one open
source tool to perform these tasks, using optimized algorithm
implementations and harvesting the full potential of modern computers,
thus guaranteeing a fast and accurate data processing.
.PP
Nucleotidic sequence comparisons is at the core of \fBvsearch\fR. To
speed up comparisons, \fBvsearch\fR implements an efficient
\fIk\fR-mer filtering, and an extremely fast implementation of the
Needleman-Wunsch algorithm, making use of the Streaming SIMD
Extensions (SSE2) of modern x86-64 CPUs. If SSE2 instructions are not
available, \fBvsearch\fR exits with an error message.
.\" ----------------------------------------------------------------------------
.SS Input
\fBvsearch\fR input is a fasta file containing one or several
nucleotidic sequences. For each sequence, the sequence identifier is
defined as the string comprised between the ">" symbol and the first
space, or the end of the line, whichever comes first. Additionally, if
the line ends with the pattern ";size=\fIinteger\fR;", \fBvsearch\fR
will interpret \fIinteger\fR as the number of occurrences (or
abundance) of the sequence in the study (see the Dereplication
section).

The nucleotidic sequence is defined as a string of IUPAC symbols
(ACGTURYSWKMDBHVN), starting after the end of the identifier line and
ending before the next identifier line or the file end. \fBvsearch\fR
silently ignores ascii characters 9 to 13, and exits with an error
message if ascii characters 0 to 8, 14 to 31, "." and "-" are
present. All other characters are stripped and complained about in a
non-blocking warning message.

\fBvsearch\fR operations are case insensitive, except when soft masking is
activated. For --vsearch_global (searching), --cluster_fast and
--cluster_smallmem (clustering), and --maskfasta (masking) commands,
the case is important if soft masking is used. Soft masking is
specified with the options "--dbmask soft" (for searching) or "--qmask
soft" (for searching, clustering and masking). When using soft
masking, lower case letters indicate masked symbols, while upper case
letters indicate regular symbols. Masked symbols are never included in
the unique \fIk\fR-mers used in searching. When soft masking is not
activated, all letters are converted to upper case internally and used
in result files.

When aligning sequences during searching and clustering, T and U are
considered identical, regardless of their case. If two symbols are
non-identical, their alignment will result in the negative mismatch
score (default -4), except if one or both of the symbols are ambiguous
(RYSWKMDBHVN) in which case the score is zero. Alignment of two
identical ambiguous symbols (e.g. R vs R) also receives a score of
zero.

Optionally, \fBvsearch\fR can be compiled to accepted compressed fasta
files as input (gz and bzip2 formats).
.\" ----------------------------------------------------------------------------
.SS Options
\fBvsearch\fR recognizes a large number of command-line options. For
an easier navigation, options are grouped by theme (dereplication,
filtering, sorting, searching, comparison, clustering). We start with
general options that apply to all or most themes.
.PP
General options:
.RS
.TP 9
.B --help
display a short help and exit.
.TP
.B --version
output version information and exit.
.TP
.BI --fasta_width\~ "positive integer"
fasta files produced by \fBvsearch\fR are wrapped (sequences are
written on lines of \fIinteger\fR nucleotides, 80 by default). Set
that value to 0 to eliminate the wrapping.
.TP
.BI --maxseqlength\~ "positive integer"
all \fBvsearch\fR operations will discard sequences of length equal or
greater than \fIinteger\fR (50,000 nucleotides by default).
.TP
.BI --minseqlength\~ "positive integer"
all \fBvsearch\fR operations will discard sequences of length smaller
than \fIinteger\fR (1 nucleotide by default for sorting or shuffling,
32 nucleotides for dereplication, clustering or searching).
.TP
.B --notrunclabels
do not truncate sequence labels at first space, use the full header.
.TP
.BI --strand\~ "plus|both"
when searching, clustering or dereplicating, check the \fIplus\fR
strand only (default) or check \fIboth\fR strands.
.TP
.BI --threads\~ "positive integer"
number of computation threads to use (1 to 256). The number of threads
should be lesser or equal to the number of available CPU cores. The
default is to launch one thread per available logical core.
.TP
.BI --uc \0filename
when searching, clustering or dereplicating, output results in
\fIfilename\fR using a uclust-like format. See
<http://www.drive5.com/usearch/manual/ucout.html> for a description of
the format.
.TP
.B --uc_allhits
when searching, clustering or dereplicating, and when using the --uc
option, show all hits, not just the top hit for each query.
.RE

.\" ----------------------------------------------------------------------------
Clustering options:
.RS
.TP 9
.BI --centroids \0filename
output cluster centroid sequences to \fIfilename\fR file.
.TP
.BI --cluster_fast \0filename
use the fast clustering algorithm and write the results to
\fIfilename\fR.
.TP
.BI --cluster_smallmem \0filename
use a slower clustering algorithm (consumes less memory) and write the
results to \fIfilename\fR.
.TP
.BI --clusters \0string
output each cluster to a separate fasta file using the prefix
\fIstring\fR and a ticker (0, 1, 2, etc.) to construct the filenames.
.TP
.\" .BI --consout \0filename
.\" output cluster consensus sequences to \fIfilename\fR. For each
.\" cluster, a multiple alignment is computed, and a consensus sequence is
.\" constructed by taking the majority symbol (nucleotide or gap) from
.\" each column of the alignment. Columns containing a majority of gaps
.\" are skipped, except for terminal gaps. Use --construncate to take
.\" terminal gaps into account.
.\" .TP
.\" .B --construncate
.\" when using the --consout option to build consensus sequences, do not
.\" ignore terminal gaps. That option skips terminal columns if they
.\" contain a majority of gaps, yielding shorter consensus sequences than
.\" when using --consout alone.
.\" .TP
.BI --id \0real
do not add the target to the cluster if the pairwise identity with the
centroid is lower than \fIreal\fR (value ranging from 0.0 to 1.0
included). The pairwise identity is defined as the number of (matching
columns) / (alignment length - terminal gaps). That definition can be
modified by --iddef.
.TP
.BI --iddef\~ "0|1|2|3|4"
change the pairwise identity definition used in --id. Values accepted
are:
.RS
.RS
.nr step 0 1
.IP \n[step]. 4
CD-HIT definition using shortest sequence as numerator.
.IP \n+[step].
edit distance.
.IP \n+[step].
edit distance excluding terminal gaps (default value).
.IP \n+[step].
Marine Biological Lab definition counting each extended gap as a
single difference.
.IP \n+[step].
BLAST, same as 2 for global pairwise alignments.
.RE
.RE
.TP
.\" .BI --msaout \0filename
.\" output multiple sequence alignments of each cluster to \fIfilename\fR.
.\" .TP
.BI --qmask\~ "none|dust|soft"
mask simple repeats and low-complexity regions in sequences using the
\fIdust\fR or the \fIsoft\fR algorithms, or do not mask
(\fInone\fR). Warning, when using \fIsoft\fR masking, clustering
becomes case sensitive. The default is to mask using \fIdust\fR.
.TP
.B --usersort
when using --cluster_smallmem, conserve the initial input order of
sequences, do not sort sequences by decreasing length before
clustering.
.RE

.\" ----------------------------------------------------------------------------
Dereplication options:
.RS
.TP 9
.BI --derep_fulllength \0filename
merge strictly identical sequences contained in
\fIfilename\fR. Redundant sequences receive the header of the first
sequence of their group. If --sizeout is used, the number of
occurrences (i.e. abundance) is indicated at the end of the fasta
header using the pattern ";size=\fIinteger\fR;".
.TP
.BI --minuniquesize\~ "positive integer"
discard sequences with an abundance value smaller than \fIinteger\fR.
.TP
.BI --output \0filename
write the dereplicated sequences to \fIfilename\fR, in fasta format.
.TP
.B --sizein
take into account the abundance annotations present in the input fasta
file (search for the pattern ";size=\fIinteger\fR;").
.TP
.B --sizeout
add abundance annotations to the output fasta file (using the
pattern";size=\fIinteger\fR;").
.TP
.B --topn\~ "positive integer"
output only the top \fIinteger\fR sequences, sorted by decreasing
abundance.
.RE

.\" ----------------------------------------------------------------------------
Masking, shuffling and sorting options:
.RS
.TP 9
.BI --maskfasta \0filename
mask sequences contained in \fIfilename\fR.
.TP
.BI --maxsize\~ "positive integer"
when using --sortbysize, discard sequences with an abundance value
equal to or greater than \fIinteger\fR.
.TP
.BI --minsize\~ "positive integer"
when using --sortbysize, discard sequences with an abundance value
smaller than \fIinteger\fR.
.TP
.BI --minuniquesize\~ "positive integer"
when dereplicating, discard sequences with an abundance value
smaller than \fIinteger\fR.
.TP
.BI --output \0filename
when dereplicating, sorting or shuffling, write the results to
\fIfilename\fR.
.TP
.BI --relabel \0string
when sorting, relabel sequence headers using \fIstring\fR as suffix.
.TP
.BI --seed\~ "positive integer"
when shuffling, use \fIinteger\fR as seed. Set to 0 to use a
pseudo-random seed.
.TP
.B --sizein
read abundance annotation from input
.TP
.B --sizeout
add abundance annotation to output
.TP
.BI --shuffle \0filename
pseudo-randomly shuffle the order of sequences contained in
\fIfilename\fR.
.TP
.BI --sortbylength \0filename
sort by decreasing length the sequences contained in \fIfilename\fR.
.TP
.BI --sortbysize \0filename
sort by decreasing abundance the sequences contained in \fIfilename\fR.
.TP
.B --topn\~ "positive integer"
when dereplicating, sorting or shuffling, output just the top
\fIinteger\fR sequences.
.RE

.\" ----------------------------------------------------------------------------
Searching options:
.RS
.TP 9
.BI --alnout \0filename
write pairwise global alignments to \fIfilename\fR using a
human-readable format.
.TP
.BI --blast6out \0filename
write search results to \fIfilename\fR using a blast-like
tab-separated format of twelve fields (listed below), with one line
per query-target matching (or lack of matching if --output_no_hits is
used). A similar output can be obtain with --userout \fIfilename\fR
and --userfields
query+target+id+alnlen+mism+opens+qlo+qhi+tlo+thi+evalue+bits. A
complete list and description is available in the section "Fields" of
this manual.
.RS
.RS
.nr step 1 1
.IP \n[step]. 4
\fIquery\fR: query label.
.IP \n+[step].
\fItarget\fR: target (database sequence or cluster centroid)
label. The field is set to "*" if there is no alignment.
.IP \n+[step].
\fIid\fR: percentage of identity (real value ranging from 0.0 to
100.0). The percentage identity is defined as 100 * (matching columns)
/ (alignment length - terminal gaps). See fields id0 to id4 for other
definitions.
.IP \n+[step].
\fIalnlen\fR: length of the query-target alignment (number of
columns). The field is set to 0 if there is no alignment.
.IP \n+[step].
\fImism\fR: number of mismatches in the alignment (zero or positive
integer value).
.IP \n+[step].
\fIopens\fR: number of columns containing a gap opening (zero or
positive integer value).
.IP \n+[step].
\fIqlo\fR: first nucleotide of the query aligned with the
target. Nucleotide numbering starts from 1. The field is set to 0 if
there is no alignment.
.IP \n+[step].
\fIqhi\fR: last nucleotide of the query aligned with the
target. Nucleotide numbering starts from 1. The field is set to 0 if
there is no alignment.
.IP \n+[step].
\fItlo\fR: first nucleotide of the target aligned with the
query. Nucleotide numbering starts from 1. The field is set to 0 if
there is no alignment.
.IP \n+[step].
\fIthi\fR: last nucleotide of the target aligned with the
query. Nucleotide numbering starts from 1. The field is set to 0 if
there is no alignment.
.IP \n+[step].
\fIevalue\fR: expectancy-value (not computed for nucleotidic
alignments). Always set to -1.
.IP \n+[step].
\fIbits\fR: bit score (not computed for nucleotidic
alignments). Always set to 0.
.RE
.RE
.TP
.BI --db \0filename
compare query sequences to the fasta-formatted target sequences
contained in \fIfilename\fR, using global pairwise alignment.
.TP
.BI --dbmask\~ "none|dust|soft"
mask simple repeats and low-complexity regions in target database
sequences using the \fIdust\fR or the \fIsoft\fR algorithms, or do not
mask (\fInone\fR). Warning, when using \fIsoft\fR masking search
commands become case sensitive. The default is to mask using
\fIdust\fR.
.TP
.BI --dbmatched \0filename
write database target sequences matching at least one query sequence
to \fIfilename\fR, in fasta format.
.TP
.BI --dbnotmatched \0filename
write database target sequences not matching query sequences to
\fIfilename\fR, in fasta format.
.TP
.BI --fastapairs \0filename
write pairwise alignments of query and target sequences to
\fIfilename\fR, in fasta format.
.TP
.B --fulldp
dummy option. To maximize search sensitivity, \fBvsearch\fR uses a 8-way
SIMD vectorized full dynamic programming algorithm (Needleman-Wunsch),
whether or not --fulldp is specified.
.TP
.BI --gapext \0string
penalties for gap extension (2I/1E)
.TP
.BI --gapopen \0string
penalties for gap opening (20I/2E)
.TP
.B --hardmask
mask low-complexity regions by replacing them with Ns instead of
setting them to lower case.
.TP
.BI --id \0real
reject the sequence match if the pairwise identity is lower than
\fIreal\fR (value ranging from 0.0 to 1.0 included). The search
process sorts target sequences by decreasing number of \fIk\fR-mers
they have in common with the query sequence, using that information as
a proxy for sequence similarity. That efficient pre-filtering will
also prevent pairwise alignments with weakly matching targets, as
there needs to be at least 6 shared \fIk\fR-mers to start the pairwise
alignment, and at least one out of every 16 \fIk\fR-mers from the
query needs to match the target. Consequently, using values lower than
--id 0.5 is not likely to capture more weakly matching targets. The
pairwise identity is defined as the number of (matching columns) /
(alignment length - terminal gaps). That definition can be modified by
--iddef.
.TP
.BI --iddef\~ "0|1|2|3|4"
change the pairwise identity definition used in --id. Values accepted
are:
.RS
.RS
.nr step 0 1
.IP \n[step]. 4
CD-HIT definition using shortest sequence as numerator.
.IP \n+[step].
edit distance.
.IP \n+[step].
edit distance excluding terminal gaps (default value).
.IP \n+[step].
Marine Biological Lab definition counting each extended gap as a
single difference.
.IP \n+[step].
BLAST, same as 2 for global pairwise alignments.
.RE
.RE
The option --userfields accepts the fields id0 to id4, in addition to
the field id, to produce the pairwise identity values corresponding to
the different definitions.
.TP
.BI --idprefix\~ "positive integer"
reject the target sequence if the first \fIinteger\fR nucleotides do
not match the query sequence.
.TP
.BI --idsuffix\~ "positive integer"
reject the target sequence if the last \fIinteger\fR nucleotides do
not match the query sequence.
.TP
.B --leftjust
reject the target sequence if the alignment begins with gaps.
.TP
.BI --match\~ "integer"
score assigned to a match (i.e. identical nucleotides) in the pairwise
alignment. The default value is 2.
.TP
.BI --matched \0filename
write query sequences matching database target sequences to
\fIfilename\fR, in fasta format.
.TP
.BI --maxaccepts\~ "positive integer"
maximum number of hits to accept before stopping the search. The
default value is 1. That option works in pair with maxrejects. The
search process sorts target sequences by decreasing number of \fIk\fR-mers
they have in common with the query sequence, using that information as
a proxy for sequence similarity. If the first target sequence passes
the acceptation criteria, it is accepted as best hit and the search
process stops for that query. If maxaccepts is set to a higher value,
more hits are accepted. If maxaccepts and maxrejects are both set to
0, the complete database is searched.
.TP
.BI --maxdiffs\~ "positive integer"
reject the target sequence if the alignment contains at least
\fIinteger\fR substitutions, insertions or deletions.
.TP
.BI --maxgaps\~ "positive integer"
reject the target sequence if the alignment contains at least
\fIinteger\fR insertions or deletions.
.TP
.BI --maxhits\~ "positive integer"
maximum number of hits to show once the search is terminated (hits are
sorted by decreasing identity). The default value is 1. Set to 0 to
ignore the option.
.TP
.BI --maxid \0real
reject the target sequence if its percentage of identity with the
query is equal or greater than \fIreal\fR.
.TP
.BI --maxqsize\~ "positive integer"
reject query sequences with an abundance equal or greater than
\fIinteger\fR.
.TP
.BI --maxqt \0real
reject if the query/target length ratio is equal or greater than
\fIreal\fR.
.TP
.BI --maxrejects\~ "positive integer"
maximum number of non-matching target sequences to consider before
stopping the search. The default value is 32. That option works in
pair with maxaccepts. The search process sorts target sequences by
decreasing number of \fIk\fR-mers they have in common with the query
sequence, using that information as a proxy for sequence
similarity. If none of the first 32 target sequences pass the
acceptation criteria, the search process stops for that query (no
hit). If maxrejects is set to a higher value, more target sequences
are considered. If maxaccepts and maxrejects are both set to 0, the
complete database is searched.
.TP
.BI --maxsizeratio \0real
reject if the query/target abundance ratio is equal or greater than
\fIreal\fR.
.TP
.BI --maxsl \0real
reject if the shorter/longer length ratio is equal or greater than
\fIreal\fR.
.TP
.BI --maxsubs\~ "positive integer"
reject the target sequence if the alignment contains at least
\fIinteger\fR substitutions.
.TP
.BI --mid \0real
reject the target sequence if its percentage of identity with the
query is lower than \fIreal\fR (ignoring gaps).
.TP
.BI --mincols\~ "positive integer"
reject the target sequence if the alignment length is shorter than
\fIinteger\fR.
.TP
.BI --minqt \0real
reject if the query/target length ratio is lower than \fIreal\fR.
.TP
.BI --minsizeratio \0real
reject if the query/target abundance ratio is lower than \fIreal\fR.
.TP
.BI --minsl \0real
reject if the shorter/longer length ratio is lower than \fIreal\fR.
.TP
.BI --mintsize\~ "positive integer"
reject target sequences with an abundance lower than \fIinteger\fR.
.TP
.BI --mismatch\~ "integer"
score assigned to a mismatch (i.e. different nucleotides) in the
pairwise alignment. The default value is -4.
.TP
.BI --notmatched \0filename
write query sequences not matching database target sequences to
\fIfilename\fR, in fasta format.
.TP
.B --output_no_hits
write both matching and non-matching queries to output files
(--alnout, --blast6out, and --userout; output files --uc and
--uc_allhits always feature non-matching queries). Non-matching
queries are labelled "No hits" in --alnout files.
.TP
.BI --qmask\~ "none|dust|soft"
mask simple repeats and low-complexity regions in query sequences
using the \fIdust\fR or the \fIsoft\fR algorithms, or do not mask
(\fInone\fR). Warning, when using \fIsoft\fR masking search commands
become case sensitive. The default is to mask using \fIdust\fR.
.TP
.BI --query_cov \0real
reject if the fraction of the query aligned to the target sequence is
lower than \fIreal\fR. The query coverage is computed as
such: 100.0 * (matches + mismatches) / query sequence length.
.TP
.B --rightjust
reject the target sequence if the alignment ends with gaps.
.TP
.BI --rowlen\~ "positive integer"
width of alignment lines in alnout output. The default value is
64. Set that value to 0 to eliminate the wrapping.
.TP
.B --self
reject the alignment if the query and target labels are identical.
.TP
.B --selfid
reject the alignment if the query and target sequences are identical.
.TP
.BI --target_cov \0real
reject if the fraction of the target sequence aligned to the query
sequence is lower than \fIreal\fR. The target coverage is computed as
such: 100.0 * (matches + mismatches) / target sequence length.
.TP
.B --top_hits_only
output only the hits with the highest percentage of identity with the
query.
.TP
.BI --userfields \0string
when using --userout, select and order the fields written to the
output file. See the next section for a complete list of fields.
.TP
.BI --userout \0filename
write user-defined tab-separated output to \fIfilename\fR. See
--userfields.
.TP
.BI --vsearch_global \0filename
\fIfilename\fR of queries for global alignment search.
.TP
.BI --weak_id \0real
show hits with percentage of identity of at least \fIreal\fR, without
terminating the search. A normal search stops as soon as enough hits
are found (as defined by --maxaccepts, --maxrejects, and --id). As
--weak_id reports weak hits that are not deduced from --maxaccepts,
high --id values can be used, hence preserving both speed and
sensitivity. Logically, \fIreal\fR must be smaller than the value
indicated by --id.
.TP
.BI --wordlength\~ "positive integer"
length of words (i.e. \fIk\fR-mers) for database indexing. The default
value is 8.
.RE

.\" ----------------------------------------------------------------------------
Fields:
.RS
.TP 9
.B aln
Print a string of M (match), D (delete, i.e. a gap in the query) and I
(insert, i.e. a gap in the target) representing the pairwise
alignment. Empty field if there is no alignment.
.TP
.B alnlen
Print the length of the query-target alignment (number of
columns). The field is set to 0 if there is no alignment.
.TP
.B bits
Bit score (not computed for nucleotidic alignments). Always set to 0.
.TP
.B caln
Compact representation of the pairwise alignment using the CIGAR
format (Compact Idiosyncratic Gapped Alignment Report): M (match), D
(deletion) and I (insertion). Empty field if there is no alignment.
.TP
.B evalue
E-value (not computed for nucleotidic alignments). Always set to -1.
.TP
.B exts
Number of columns containing a gap extension (zero or positive integer
value).
.TP
.B gaps
Number of columns containing a gap (zero or positive integer value).
.TP
.B id
Percentage of identity (real value ranging from 0.0 to 100.0). The
percentage identity is defined as 100 * (matching columns) /
(alignment length - terminal gaps).
.TP
.B id0
CD-HIT definition of the percentage of identity, using the shortest
sequence in the pairwise alignment as numerator (real value ranging
from 0.0 to 100.0).
.TP
.B id1
The percentage of identity (real value ranging from 0.0 to 100.0) is
defined as the edit distance: 100 * (matching columns) / (alignment
length).
.TP
.B id2
The percentage of identity (real value ranging from 0.0 to 100.0) is
defined as the edit distance, excluding terminal gaps. The field id2 is
an alias for the field id.
.TP
.B id3
Marine Biological Lab definition of the percentage of identity (real
value ranging from 0.0 to 100.0), counting each extended gap as a
single difference.
.TP
.B id4
BLAST definition of the percentage of identity (real value ranging
from 0.0 to 100.0), same as the field id2 for global pairwise
alignments.
.TP
.B ids
Number of matches in the alignment (zero or positive integer value).
.TP
.B mism
Number of mismatches in the alignment (zero or positive integer
value).
.TP
.B opens
Number of columns containing a gap opening (zero or positive integer
value).
.TP
.B pairs
Number of columns containing only nucleotides. That value corresponds
to the length of the alignment minus the gap-containing columns (zero
or positive integer value).
.TP
.B pctgaps
Number of columns containing gaps expressed as a percentage of the
alignment length (real value ranging from 0.0 to 100.0).
.TP
.B pctpv
Percentage of positive columns. When working with nucleotidic
sequences, this is equivalent to the percentage of matches (real value
ranging from 0.0 to 100.0).
.TP
.B pv
Number of positive columns. When working with nucleotidic sequences,
this is equivalent to the number of matches (zero or positive integer
value).
.TP
.B qcov
Fraction of the query sequence that is aligned with the target
sequence (real value ranging from 0.0 to 100.0). The query coverage is
computed as such: 100.0 * (matches + mismatches) / query sequence
length. The field is set to 0.0 if there is no alignment.
.TP
.B qframe
Query frame (-3 to +3). That field only concerns coding sequences and
is not computed by \fBvsearch\fR. Always set to +0.
.TP
.B qhi
Last nucleotide of the query aligned with the target. Nucleotide
numbering starts from 1. The field is set to 0 if there is no
alignment.
.TP
.B ql
Query sequence length (positive integer value). The field is set to 0
if there is no alignment.
.TP
.B qlo
First nucleotide of the query aligned with the target. Nucleotide
numbering starts from 1. The field is set to 0 if there is no
alignment.
.TP
.B qrow
Print the sequence of the query segment as seen in the pairwise
alignment (i.e. with gap insertions if need be). Empty field if there
is no alignment.
.TP
.B qs
Query segment length. Always equal to query sequence length.
.\" The meaning of that field is not clear to us. 
.TP
.B qstrand
Query strand orientation (+ or - for nucleotidic sequences). Empty
field if there is no alignment.
.TP
.B query
Query label.
.TP
.B raw
Raw alignment score (negative, null or positive integer value). The
score is the sum of match rewards minus mismatch penalties, gap
openings and gap extensions. The field is set to 0 if there is no
alignment.
.TP
.B target
Target label. The field is set to "*" if there is no alignment.
.TP
.B tcov
Fraction of the target sequence that is aligned with the query
sequence (real value ranging from 0.0 to 100.0). The target coverage
is computed as such: 100.0 * (matches + mismatches) / target sequence
length. The field is set to 0.0 if there is no alignment.
.TP
.B tframe
Target frame (-3 to +3). That field only concerns coding sequences and
is not computed by \fBvsearch\fR. Always set to +0.
.TP
.B thi
Last nucleotide of the target aligned with the query. Nucleotide
numbering starts from 1. The field is set to 0 if there is no
alignment.
.TP
.B tl
Target sequence length (positive integer value). The field is set to 0
if there is no alignment.
.TP
.B tlo
First nucleotide of the target aligned with the query. Nucleotide
numbering starts from 1. The field is set to 0 if there is no
alignment.
.TP
.B trow
Print the sequence of the target segment as seen in the pairwise
alignment (i.e. with gap insertions if need be). Empty field if there
is no alignment.
.TP
.B ts
Target segment length. Always equal to target sequence length. The
field is set to 0 if there is no alignment.
.TP
.B tstrand
Target strand orientation (+ or - for nucleotidic sequences). Always
set to "+", so reverse strand matches have tstrand "+" and qstrand
"-". Empty field if there is no alignment.
.RE


.\" ============================================================================
.SH DELIBERATE CHANGES
If you are a usearch user, our objective is to make you feel at
home. That's why \fBvsearch\fR was designed to behave like usearch, to
some extend. Like any complex software, usearch is not free from
quirks and inconsistencies. We decided not to reproduce some of them,
and for complete transparency, to document here the deliberate changes
we made.

During a search with usearch, when using the options --blast6out and
--output_no_hits, for queries with no match the number of fields
reported is 13, where it should be 12. This is corrected in
\fBvsearch\fR.

The fields qlo, qhi, tlo, thi and raw of the --userfields option are
not informative in usearch. This is corrected in \fBvsearch\fR.

In usearch, when using the option --output_no_hits, queries that
receive no match are reported in blast6out file, but not in the
alignment output file. This is corrected in \fBvsearch\fR.

\fBvsearch\fR reintroduces with --iddef alternative pairwise identity
definitions that were removed from usearch.

.\" ============================================================================
.SH NOVELTIES
\fBvsearch\fR introduces new options not present in usearch. They are
described in the "Options" section of this manual. Here is a short
list:
.IP \[bu] 2
shuffle
.IP \[bu]
fasta_width
.IP \[bu]
iddef

.\" ============================================================================
.SH EXAMPLES
(in progress)

Search queries in a reference database, with a 80%-similarity
threshold, take terminal gaps into account when calculating pairwise
similarities:

.RS
\fBvsearch\fR --vsearch_global \fIqueries.fas\fR --db \fIreferences.fas\fR --alnout \fIresults.aln\fR --id 0.8 --iddef 1

.RE
Search a sequence dataset against itself (ignore self hits), get all
matches with at least 60% identity, and collect results in a
blast-like tab-separated format:

.RS
\fBvsearch\fR --vsearch_global \fIqueries.fas\fR --db \fIqueries.fas\fR --id 0.6 --alnout \fIresults.aln\fR --self --blast6out \fIresults.blast6\fR --maxaccepts 0 --maxrejects 0

.RE
Clusterize with a 97% similarity threshold, collect cluster centroids,
and write cluster descriptions using a uclust-like format:

.RS
\fBvsearch\fR --cluster_fast \fIqueries.fas\fR --id 0.97 --centroids \fIcentroids.fas\fR --uc \fIclusters.uc\fR

.RE
.\" .B vsearch
.\" -t 4 -o
.\" .I myfile.vsearchs myfile.fasta
.\" .br
.\" Divide the data set \fImyfile.fasta\fR into vsearchs with the finest
.\" resolution possible (1 difference) using 4 computation threads, and
.\" write the results in the file \fImyfile.vsearchs\fR.
.\" .PP
.\" zcat file.fas.gz | \fBvsearch\fR | awk "{print NF}" | sort -n | uniq -c
.\" .br
.\" Use vsearch in a pipeline to read a compressed fasta file and to get its
.\" vsearch size profile (with default parameters).
.\" ============================================================================
.SH LIMITATIONS
\fBvsearch\fR does not yet perform chimera detection.
.\" ============================================================================
.SH AUTHORS
Implementation by Torbjørn Rognes and Tomas Flouri, documentation by Frédéric Mahé.
.\" ============================================================================
.SH REPORTING BUGS
Submit suggestions and bug-reports at
<https://github.com/torognes/vsearch/issues>, send a pull request on
<https://github.com/torognes/vsearch>, or compose a friendly or
curmudgeont e-mail to Torbjørn Rognes <torognes@ifi.uio.no>.
.\" ============================================================================
.SH AVAILABILITY
Source code and binaries are available at <https://github.com/torognes/vsearch>.
.\" ============================================================================
.SH COPYRIGHT
Copyright (C) 2014 Torbjørn Rognes et al.
.PP
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or any later version.
.PP
This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Affero General Public License for more details.
.PP
You should have received a copy of the GNU Affero General Public
License along with this program.  If not, see
<http://www.gnu.org/licenses/>.
.PP
\fBvsearch\fR includes code from Google's CityHash project by Geoff
Pike and Jyrki Alakuijala, providing some excellent hash functions
available under a MIT license.
.PP
\fBvsearch\fR includes code derived from Tatusov and Lipman's DUST
program that is in the public domain.
.PP
\fBvsearch\fR binaries may include code from the zlib library,
copyright Jean-loup Gailly and Mark Adler.
.PP
\fBvsearch\fR binaries may include code from the bzip2 library,
copyright Julian R. Seward.
.\" ============================================================================
.SH SEE ALSO
\fBswipe\fR, an extremely fast Smith-Waterman database search tool by
Torbjørn Rognes and available at <https://github.com/torognes/swipe>.
.\" ============================================================================
.SH VERSION HISTORY
New features and important modifications of \fBvsearch\fR (short lived
or minor bug releases are not mentioned):
.RS
.TP
.BR v1.0\~ "released November 15, 2014"
First public release
.LP
.\" ============================================================================
.\" TODO:
.\" - "--uc_allhits": how is it working for clustering?
.\"
.\" NOTES
.\" visualize and output to pdf
.\" man -l vsearch.1
.\" man -t ./doc/vsearch.1 | ps2pdf - > ./doc/vsearch_manual.pdfq
.\"
.\" INSTALL (sysadmin)
.\" gzip -c vsearch.1 > vsearch.1.gz
.\" mv vsearch.1.gz /usr/share/man/man1/
